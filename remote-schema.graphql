# This file was generated. Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union GenericMorph = I18NLocale | NavigationAudience | NavigationNavigation | NavigationNavigationItem | NavigationNavigationsItemsRelated | SitemapSitemap | SitemapSitemapCache | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

type Mutation {
  "Change user password. Confirm with the current password."
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createNavigationAudience(data: NavigationAudienceInput!): NavigationAudienceEntityResponse
  createNavigationNavigation(data: NavigationNavigationInput!): NavigationNavigationEntityResponse
  createNavigationNavigationItem(data: NavigationNavigationItemInput!): NavigationNavigationItemEntityResponse
  createNavigationNavigationsItemsRelated(data: NavigationNavigationsItemsRelatedInput!): NavigationNavigationsItemsRelatedEntityResponse
  createSitemapSitemap(data: SitemapSitemapInput!): SitemapSitemapEntityResponse
  createSitemapSitemapCache(data: SitemapSitemapCacheInput!): SitemapSitemapCacheEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  "Create a new role"
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  "Create a new user"
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteNavigationAudience(id: ID!): NavigationAudienceEntityResponse
  deleteNavigationNavigation(id: ID!): NavigationNavigationEntityResponse
  deleteNavigationNavigationItem(id: ID!): NavigationNavigationItemEntityResponse
  deleteNavigationNavigationsItemsRelated(id: ID!): NavigationNavigationsItemsRelatedEntityResponse
  deleteSitemapSitemap(id: ID!): SitemapSitemapEntityResponse
  deleteSitemapSitemapCache(id: ID!): SitemapSitemapCacheEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  "Delete an existing role"
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  "Delete an existing user"
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  "Confirm an email users email address"
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  "Request a reset password token"
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!
  "Register a user"
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse
  "Reset user password. Confirm with a code (resetToken from forgotPassword)"
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateNavigationAudience(data: NavigationAudienceInput!, id: ID!): NavigationAudienceEntityResponse
  updateNavigationNavigation(data: NavigationNavigationInput!, id: ID!): NavigationNavigationEntityResponse
  updateNavigationNavigationItem(data: NavigationNavigationItemInput!, id: ID!): NavigationNavigationItemEntityResponse
  updateNavigationNavigationsItemsRelated(data: NavigationNavigationsItemsRelatedInput!, id: ID!): NavigationNavigationsItemsRelatedEntityResponse
  updateSitemapSitemap(data: SitemapSitemapInput!, id: ID!): SitemapSitemapEntityResponse
  updateSitemapSitemapCache(data: SitemapSitemapCacheInput!, id: ID!): SitemapSitemapCacheEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse
  "Update an existing role"
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
  "Update an existing user"
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type NavigationAudience {
  createdAt: DateTime
  key: String
  name: String!
  sitemap_exclude: Boolean
  updatedAt: DateTime
}

type NavigationAudienceEntity {
  attributes: NavigationAudience
  id: ID
}

type NavigationAudienceEntityResponse {
  data: NavigationAudienceEntity
}

type NavigationAudienceEntityResponseCollection {
  data: [NavigationAudienceEntity!]!
  meta: ResponseCollectionMeta!
}

type NavigationAudienceRelationResponseCollection {
  data: [NavigationAudienceEntity!]!
}

type NavigationNavigation {
  createdAt: DateTime
  items(filters: NavigationNavigationItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): NavigationNavigationItemRelationResponseCollection
  localeCode: String
  localizations(filters: NavigationNavigationFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): NavigationNavigationRelationResponseCollection
  name: String!
  sitemap_exclude: Boolean
  slug: String!
  updatedAt: DateTime
  visible: Boolean
}

type NavigationNavigationEntity {
  attributes: NavigationNavigation
  id: ID
}

type NavigationNavigationEntityResponse {
  data: NavigationNavigationEntity
}

type NavigationNavigationEntityResponseCollection {
  data: [NavigationNavigationEntity!]!
  meta: ResponseCollectionMeta!
}

type NavigationNavigationItem {
  additionalFields: JSON
  audience(filters: NavigationAudienceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): NavigationAudienceRelationResponseCollection
  collapsed: Boolean
  createdAt: DateTime
  externalPath: String
  master: NavigationNavigationEntityResponse
  menuAttached: Boolean
  order: Int
  parent: NavigationNavigationItemEntityResponse
  path: String
  related: NavigationNavigationsItemsRelatedEntityResponse
  sitemap_exclude: Boolean
  title: String!
  type: ENUM_NAVIGATIONNAVIGATIONITEM_TYPE
  uiRouterKey: String
  updatedAt: DateTime
}

type NavigationNavigationItemEntity {
  attributes: NavigationNavigationItem
  id: ID
}

type NavigationNavigationItemEntityResponse {
  data: NavigationNavigationItemEntity
}

type NavigationNavigationItemEntityResponseCollection {
  data: [NavigationNavigationItemEntity!]!
  meta: ResponseCollectionMeta!
}

type NavigationNavigationItemRelationResponseCollection {
  data: [NavigationNavigationItemEntity!]!
}

type NavigationNavigationRelationResponseCollection {
  data: [NavigationNavigationEntity!]!
}

type NavigationNavigationsItemsRelated {
  createdAt: DateTime
  field: String!
  master: String!
  order: Int!
  related_id: String!
  related_type: String!
  sitemap_exclude: Boolean
  updatedAt: DateTime
}

type NavigationNavigationsItemsRelatedEntity {
  attributes: NavigationNavigationsItemsRelated
  id: ID
}

type NavigationNavigationsItemsRelatedEntityResponse {
  data: NavigationNavigationsItemsRelatedEntity
}

type NavigationNavigationsItemsRelatedEntityResponseCollection {
  data: [NavigationNavigationsItemsRelatedEntity!]!
  meta: ResponseCollectionMeta!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

type Query {
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  navigationAudience(id: ID): NavigationAudienceEntityResponse
  navigationAudiences(filters: NavigationAudienceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): NavigationAudienceEntityResponseCollection
  navigationNavigation(id: ID): NavigationNavigationEntityResponse
  navigationNavigationItem(id: ID): NavigationNavigationItemEntityResponse
  navigationNavigationItems(filters: NavigationNavigationItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): NavigationNavigationItemEntityResponseCollection
  navigationNavigations(filters: NavigationNavigationFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): NavigationNavigationEntityResponseCollection
  navigationNavigationsItemsRelated(id: ID): NavigationNavigationsItemsRelatedEntityResponse
  navigationNavigationsItemsRelateds(filters: NavigationNavigationsItemsRelatedFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): NavigationNavigationsItemsRelatedEntityResponseCollection
  sitemapSitemap(id: ID): SitemapSitemapEntityResponse
  sitemapSitemapCache(id: ID): SitemapSitemapCacheEntityResponse
  sitemapSitemapCaches(filters: SitemapSitemapCacheFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SitemapSitemapCacheEntityResponseCollection
  sitemapSitemaps(filters: SitemapSitemapFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SitemapSitemapEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type SitemapSitemap {
  createdAt: DateTime
  delta: Int
  link_count: Int
  name: String!
  sitemap_string: String!
  type: ENUM_SITEMAPSITEMAP_TYPE
  updatedAt: DateTime
}

type SitemapSitemapCache {
  createdAt: DateTime
  name: String!
  sitemap_id: Int!
  sitemap_json: JSON!
  updatedAt: DateTime
}

type SitemapSitemapCacheEntity {
  attributes: SitemapSitemapCache
  id: ID
}

type SitemapSitemapCacheEntityResponse {
  data: SitemapSitemapCacheEntity
}

type SitemapSitemapCacheEntityResponseCollection {
  data: [SitemapSitemapCacheEntity!]!
  meta: ResponseCollectionMeta!
}

type SitemapSitemapEntity {
  attributes: SitemapSitemap
  id: ID
}

type SitemapSitemapEntityResponse {
  data: SitemapSitemapEntity
}

type SitemapSitemapEntityResponseCollection {
  data: [SitemapSitemapEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  folder: UploadFolderEntityResponse
  folderPath: String!
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  sitemap_exclude: Boolean
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  password: String
  provider: String
  resetPasswordToken: String
  role: UsersPermissionsRoleEntityResponse
  sitemap_exclude: Boolean
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

enum ENUM_NAVIGATIONNAVIGATIONITEM_TYPE {
  EXTERNAL
  INTERNAL
  WRAPPER
}

enum ENUM_SITEMAPSITEMAP_TYPE {
  default_hreflang
  index
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Upload` scalar type represents a file upload."
scalar Upload

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

input NavigationAudienceFiltersInput {
  and: [NavigationAudienceFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  key: StringFilterInput
  name: StringFilterInput
  not: NavigationAudienceFiltersInput
  or: [NavigationAudienceFiltersInput]
  sitemap_exclude: BooleanFilterInput
  updatedAt: DateTimeFilterInput
}

input NavigationAudienceInput {
  key: String
  name: String
  sitemap_exclude: Boolean
}

input NavigationNavigationFiltersInput {
  and: [NavigationNavigationFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  items: NavigationNavigationItemFiltersInput
  localeCode: StringFilterInput
  localizations: NavigationNavigationFiltersInput
  name: StringFilterInput
  not: NavigationNavigationFiltersInput
  or: [NavigationNavigationFiltersInput]
  sitemap_exclude: BooleanFilterInput
  slug: StringFilterInput
  updatedAt: DateTimeFilterInput
  visible: BooleanFilterInput
}

input NavigationNavigationInput {
  items: [ID]
  localeCode: String
  localizations: [ID]
  name: String
  sitemap_exclude: Boolean
  slug: String
  visible: Boolean
}

input NavigationNavigationItemFiltersInput {
  additionalFields: JSONFilterInput
  and: [NavigationNavigationItemFiltersInput]
  audience: NavigationAudienceFiltersInput
  collapsed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  externalPath: StringFilterInput
  id: IDFilterInput
  master: NavigationNavigationFiltersInput
  menuAttached: BooleanFilterInput
  not: NavigationNavigationItemFiltersInput
  or: [NavigationNavigationItemFiltersInput]
  order: IntFilterInput
  parent: NavigationNavigationItemFiltersInput
  path: StringFilterInput
  related: NavigationNavigationsItemsRelatedFiltersInput
  sitemap_exclude: BooleanFilterInput
  title: StringFilterInput
  type: StringFilterInput
  uiRouterKey: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input NavigationNavigationItemInput {
  additionalFields: JSON
  audience: [ID]
  collapsed: Boolean
  externalPath: String
  master: ID
  menuAttached: Boolean
  order: Int
  parent: ID
  path: String
  related: ID
  sitemap_exclude: Boolean
  title: String
  type: ENUM_NAVIGATIONNAVIGATIONITEM_TYPE
  uiRouterKey: String
}

input NavigationNavigationsItemsRelatedFiltersInput {
  and: [NavigationNavigationsItemsRelatedFiltersInput]
  createdAt: DateTimeFilterInput
  field: StringFilterInput
  id: IDFilterInput
  master: StringFilterInput
  not: NavigationNavigationsItemsRelatedFiltersInput
  or: [NavigationNavigationsItemsRelatedFiltersInput]
  order: IntFilterInput
  related_id: StringFilterInput
  related_type: StringFilterInput
  sitemap_exclude: BooleanFilterInput
  updatedAt: DateTimeFilterInput
}

input NavigationNavigationsItemsRelatedInput {
  field: String
  master: String
  order: Int
  related_id: String
  related_type: String
  sitemap_exclude: Boolean
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

input SitemapSitemapCacheFiltersInput {
  and: [SitemapSitemapCacheFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: SitemapSitemapCacheFiltersInput
  or: [SitemapSitemapCacheFiltersInput]
  sitemap_id: IntFilterInput
  sitemap_json: JSONFilterInput
  updatedAt: DateTimeFilterInput
}

input SitemapSitemapCacheInput {
  name: String
  sitemap_id: Int
  sitemap_json: JSON
}

input SitemapSitemapFiltersInput {
  and: [SitemapSitemapFiltersInput]
  createdAt: DateTimeFilterInput
  delta: IntFilterInput
  id: IDFilterInput
  link_count: IntFilterInput
  name: StringFilterInput
  not: SitemapSitemapFiltersInput
  or: [SitemapSitemapFiltersInput]
  sitemap_string: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input SitemapSitemapInput {
  delta: Int
  link_count: Int
  name: String
  sitemap_string: String
  type: ENUM_SITEMAPSITEMAP_TYPE
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  sitemap_exclude: BooleanFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  sitemap_exclude: Boolean
  size: Float
  url: String
  width: Int
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  sitemap_exclude: BooleanFilterInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  sitemap_exclude: Boolean
  username: String
}
